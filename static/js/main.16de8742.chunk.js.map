{"version":3,"sources":["_styles/theme.dark.ts","_components/Logos.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","text","responsiveFontSizes","useStyles","makeStyles","createStyles","logos","& img","&$markatent","display","alignItems","&>*","maxWidth","spacing","maxHeight","&:not(:last-child)","marginRight","markatent","&>img","position","&>span","color","fontFamily","fontSize","letterSpacing","lineHeight","kiviCapital","flexFlow","width","textAlign","textTransform","fontWeight","opinia360","&:first-child","&:last-child","Logos","classes","react_default","a","createElement","Fragment","Container","className","alt","src","concat","topSomething","backgroundColor","padding","&>div","name","jumbotron","App","Typography","variant","_components_Logos","Boolean","window","location","hostname","match","ReactDOM","render","ThemeProvider","themeDark","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16de8742.chunk.js","sourcesContent":["import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles'\n\nlet theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#4e6c8c',\n      main: '#20415f',\n      dark: '#001b35',\n      contrastText: '#f2eade',\n    },\n    secondary: {\n      light: '#ef8393',\n      main: '#ba5465',\n      dark: '#86253b',\n    },\n    text: {\n      primary: '#222',\n    },\n  },\n})\ntheme = responsiveFontSizes(theme)\nexport default theme\n","import React from 'react'\nimport { Container, makeStyles, createStyles, Theme } from '@material-ui/core'\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    logos: {\n      '& img': {\n        '&$markatent': {},\n      },\n      display: 'flex',\n      alignItems: 'center',\n      '&>*': {\n        maxWidth: theme.spacing(22),\n        maxHeight: theme.spacing(6),\n        '&:not(:last-child)': {\n          marginRight: theme.spacing(4),\n        },\n      },\n    },\n    markatent: {\n      '&>img': {\n        maxWidth: theme.spacing(3.5),\n        position: 'relative',\n        marginRight: 0,\n      },\n      '&>span': {\n        color: theme.palette.text.primary,\n        fontFamily: \"'Bebas Neue', sans-serif\",\n        fontSize: theme.spacing(3.5),\n        letterSpacing: '1.6px',\n        lineHeight: 1.4,\n      },\n    },\n    kiviCapital: {\n      flexFlow: 'column wrap',\n      width: theme.spacing(13),\n      textAlign: 'center',\n      alignItems: 'center',\n      '&>span': {\n        fontFamily: \"'Roboto', sans-serif\",\n        textTransform: 'uppercase',\n        fontSize: 22,\n        lineHeight: 1,\n        fontWeight: 500,\n      },\n    },\n    opinia360: {\n      '&>span': {\n        fontFamily: \"'Roboto', sans-serif\",\n        lineHeight: 1.4,\n        '&:first-child': {\n          fontWeight: 900,\n        },\n        '&:last-child': {\n          fontWeight: 100,\n        },\n      },\n    },\n  }),\n)\nconst Logos: React.FC = () => {\n  const classes = useStyles()\n  return (\n    <>\n      <Container className={classes.logos}>\n        <img alt=\"Tribalscale\" src={'tribalscale.svg'} />\n        <img alt=\"DP World\" src={'DPWorld.png'} />\n        <img alt=\"noon\" src={'noon.png'} />\n        <div className={classes.markatent}>\n          {/* <img alt=\"Markatent\" src={'markatent.png'} /> */}\n          <span>Markatent</span>\n        </div>\n        <img alt=\"CapeXmove\" src={'capexmove.png'} />\n        <div className={`${classes.markatent} ${classes.opinia360}`}>\n          {/* <img alt=\"KiviCapital\" src={'kivicapital.png'} /> */}\n          <span>OPINIA</span>\n          <span>360</span>\n        </div>\n        <img alt=\"StoneartAsia\" src={'stoneartAsia.png'} />\n        <div className={`${classes.markatent} ${classes.kiviCapital}`}>\n          {/* <img alt=\"KiviCapital\" src={'kivicapital.png'} /> */}\n          <span>Kivi Capital</span>\n        </div>\n      </Container>\n    </>\n  )\n}\n\nexport default Logos\n","import React from 'react'\nimport {\n  Container,\n  Typography,\n  makeStyles,\n  createStyles,\n  Theme,\n} from '@material-ui/core'\n\nimport Logos from './_components/Logos'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    topSomething: {\n      backgroundColor: '#fff',\n      padding: theme.spacing(1, 0),\n      '&>div': {\n        display: 'flex',\n        alignItems: 'baseline',\n        flexFlow: 'row nowrap',\n      },\n    },\n    name: {\n      marginRight: theme.spacing(2),\n      fontFamily: \"'Work Sans', sans-serif\",\n      fontWeight: 500,\n    },\n    jumbotron: {\n      padding: theme.spacing(2, 0),\n    },\n  }),\n)\n\nconst App: React.FC = () => {\n  const classes = useStyles()\n  return (\n    <>\n      <div className={classes.topSomething}>\n        <Container>\n          <Typography className={classes.name} variant=\"h6\">\n            Bhanvi Shukla\n          </Typography>\n          <Typography variant=\"overline\" color=\"textSecondary\">\n            User Interface Developer\n          </Typography>\n        </Container>\n      </div>\n      <div className={classes.jumbotron}>\n        <Logos />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport themeDark from './_styles/theme.dark'\nimport './_styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ThemeProvider theme={themeDark}><App /></ThemeProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}